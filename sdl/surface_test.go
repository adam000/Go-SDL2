package sdl

import (
	"testing"
)

/*
These tests are inspired by the macros in SDL: include/SDL_pixels.h
These tests need to be updated if the corresponding macros change, and then the consts insurface.go
need to be updated.
Last update: SDL 2.0.1
*/
func TestPixelFormatValues(t *testing.T) {
	tests := []struct {
		name     string
		got      PixelFormat
		expected PixelFormat
	}{
		{
			"PIXELFORMAT_UNKNOWN",
			PIXELFORMAT_UNKNOWN,
			0,
		},
		{
			"PIXELFORMAT_INDEX1LSB",
			PIXELFORMAT_INDEX1LSB,
			DEFINE_PIXELFORMAT(PIXELTYPE_INDEX1, BITMAPORDER_4321, 0, 1, 0),
		},
		{
			"PIXELFORMAT_INDEX1MSB",
			PIXELFORMAT_INDEX1MSB,
			DEFINE_PIXELFORMAT(PIXELTYPE_INDEX1, BITMAPORDER_1234, 0, 1, 0),
		},
		{
			"PIXELFORMAT_INDEX4LSB",
			PIXELFORMAT_INDEX4LSB,
			DEFINE_PIXELFORMAT(PIXELTYPE_INDEX4, BITMAPORDER_4321, 0, 4, 0),
		},
		{
			"PIXELFORMAT_INDEX4MSB",
			PIXELFORMAT_INDEX4MSB,
			DEFINE_PIXELFORMAT(PIXELTYPE_INDEX4, BITMAPORDER_1234, 0, 4, 0),
		},
		{
			"PIXELFORMAT_INDEX8",
			PIXELFORMAT_INDEX8,
			DEFINE_PIXELFORMAT(PIXELTYPE_INDEX8, 0, 0, 8, 1),
		},
		{
			"PIXELFORMAT_RGB332",
			PIXELFORMAT_RGB332,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED8, PACKEDORDER_XRGB, PACKEDLAYOUT_332, 8, 1),
		},
		{
			"PIXELFORMAT_RGB444",
			PIXELFORMAT_RGB444,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_XRGB, PACKEDLAYOUT_4444, 12, 2),
		},
		{
			"PIXELFORMAT_RGB555",
			PIXELFORMAT_RGB555,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_XRGB, PACKEDLAYOUT_1555, 15, 2),
		},
		{
			"PIXELFORMAT_BGR555",
			PIXELFORMAT_BGR555,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_XBGR, PACKEDLAYOUT_1555, 15, 2),
		},
		{
			"PIXELFORMAT_ARGB4444",
			PIXELFORMAT_ARGB4444,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_ARGB, PACKEDLAYOUT_4444, 16, 2),
		},
		{
			"PIXELFORMAT_RGBA4444",
			PIXELFORMAT_RGBA4444,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_RGBA, PACKEDLAYOUT_4444, 16, 2),
		},
		{
			"PIXELFORMAT_ABGR4444",
			PIXELFORMAT_ABGR4444,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_ABGR, PACKEDLAYOUT_4444, 16, 2),
		},
		{
			"PIXELFORMAT_BGRA4444",
			PIXELFORMAT_BGRA4444,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_BGRA, PACKEDLAYOUT_4444, 16, 2),
		},
		{
			"PIXELFORMAT_ARGB1555",
			PIXELFORMAT_ARGB1555,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_ARGB, PACKEDLAYOUT_1555, 16, 2),
		},
		{
			"PIXELFORMAT_RGBA5551",
			PIXELFORMAT_RGBA5551,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_RGBA, PACKEDLAYOUT_5551, 16, 2),
		},
		{
			"PIXELFORMAT_ABGR1555",
			PIXELFORMAT_ABGR1555,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_ABGR, PACKEDLAYOUT_1555, 16, 2),
		},
		{
			"PIXELFORMAT_BGRA5551",
			PIXELFORMAT_BGRA5551,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_BGRA, PACKEDLAYOUT_5551, 16, 2),
		},
		{
			"PIXELFORMAT_RGB565",
			PIXELFORMAT_RGB565,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_XRGB, PACKEDLAYOUT_565, 16, 2),
		},
		{
			"PIXELFORMAT_BGR565",
			PIXELFORMAT_BGR565,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_XBGR, PACKEDLAYOUT_565, 16, 2),
		},
		{
			"PIXELFORMAT_RGB24",
			PIXELFORMAT_RGB24,
			DEFINE_PIXELFORMAT(PIXELTYPE_ARRAYU8, ARRAYORDER_RGB, 0, 24, 3),
		},
		{
			"PIXELFORMAT_BGR24",
			PIXELFORMAT_BGR24,
			DEFINE_PIXELFORMAT(PIXELTYPE_ARRAYU8, ARRAYORDER_BGR, 0, 24, 3),
		},
		{
			"PIXELFORMAT_RGB888",
			PIXELFORMAT_RGB888,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_XRGB, PACKEDLAYOUT_8888, 24, 4),
		},
		{
			"PIXELFORMAT_RGBX8888",
			PIXELFORMAT_RGBX8888,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_RGBX, PACKEDLAYOUT_8888, 24, 4),
		},
		{
			"PIXELFORMAT_BGR888",
			PIXELFORMAT_BGR888,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_XBGR, PACKEDLAYOUT_8888, 24, 4),
		},
		{
			"PIXELFORMAT_BGRX8888",
			PIXELFORMAT_BGRX8888,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_BGRX, PACKEDLAYOUT_8888, 24, 4),
		},
		{
			"PIXELFORMAT_ARGB8888",
			PIXELFORMAT_ARGB8888,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_ARGB, PACKEDLAYOUT_8888, 32, 4),
		},
		{
			"PIXELFORMAT_RGBA8888",
			PIXELFORMAT_RGBA8888,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_RGBA, PACKEDLAYOUT_8888, 32, 4),
		},
		{
			"PIXELFORMAT_ABGR8888",
			PIXELFORMAT_ABGR8888,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_ABGR, PACKEDLAYOUT_8888, 32, 4),
		},
		{
			"PIXELFORMAT_BGRA8888",
			PIXELFORMAT_BGRA8888,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_BGRA, PACKEDLAYOUT_8888, 32, 4),
		},
		{
			"PIXELFORMAT_ARGB2101010",
			PIXELFORMAT_ARGB2101010,
			DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_ARGB, PACKEDLAYOUT_2101010, 32, 4),
		},
		{
			"PIXELFORMAT_YV12",
			PIXELFORMAT_YV12,
			DEFINE_PIXELFOURCC(uint32('Y'), uint32('V'), uint32('1'), uint32('2')),
		},
		{
			"PIXELFORMAT_IYUV",
			PIXELFORMAT_IYUV,
			DEFINE_PIXELFOURCC(uint32('I'), uint32('Y'), uint32('U'), uint32('V')),
		},
		{
			"PIXELFORMAT_YUY2",
			PIXELFORMAT_YUY2,
			DEFINE_PIXELFOURCC(uint32('Y'), uint32('U'), uint32('Y'), uint32('2')),
		},
		{
			"PIXELFORMAT_UYVY",
			PIXELFORMAT_UYVY,
			DEFINE_PIXELFOURCC(uint32('U'), uint32('Y'), uint32('V'), uint32('Y')),
		},
		{
			"PIXELFORMAT_YVYU",
			PIXELFORMAT_YVYU,
			DEFINE_PIXELFOURCC(uint32('Y'), uint32('V'), uint32('Y'), uint32('U')),
		},
	}

	for _, test := range tests {
		if test.expected != test.got {
			t.Errorf("%s: expected %d, got %d", test.name, test.expected, test.got)
		}
	}
}
